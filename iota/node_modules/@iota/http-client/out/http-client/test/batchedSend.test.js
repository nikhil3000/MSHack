"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var ava_1 = require("ava");
var nock = require("nock");
var types_1 = require("../../types");
var src_1 = require("../src");
var send_test_1 = require("./send.test");
var API_VERSION = 1;
var send = src_1.createHttpClient({
    provider: 'http://localhost:24265',
    requestBatchSize: 2,
    apiVersion: API_VERSION
}).send;
exports.command = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['A'.repeat(81), 'B'.repeat(81), 'C'.repeat(81)],
    tags: ['A'.repeat(27), 'B'.repeat(27), 'C'.repeat(27)],
    approvees: ['D'.repeat(81)]
};
exports.commandA = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['A'.repeat(81), 'B'.repeat(81)]
};
exports.commandB = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['C'.repeat(81)]
};
exports.commandC = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    tags: ['A'.repeat(27), 'B'.repeat(27)]
};
exports.commandD = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    tags: ['C'.repeat(27)]
};
exports.commandE = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    approvees: ['D'.repeat(81)]
};
exports.responseA = {
    hashes: ['A'.repeat(81), 'C'.repeat(81)]
};
exports.responseB = {
    hashes: ['B'.repeat(81), 'D'.repeat(81)]
};
exports.responseC = {
    hashes: ['A'.repeat(81), 'D'.repeat(81), 'E'.repeat(81)]
};
exports.responseD = {
    hashes: ['B'.repeat(81), 'A'.repeat(81)]
};
exports.responseE = {
    hashes: ['A'.repeat(81), 'C'.repeat(81)]
};
exports.response = {
    hashes: ['A'.repeat(81)]
};
exports.batchedSendNockA = nock('http://localhost:24265', send_test_1.headers(API_VERSION))
    .persist()
    .post('/', exports.commandA)
    .reply(200, exports.responseA);
exports.batchedSendNockB = nock('http://localhost:24265', send_test_1.headers(API_VERSION))
    .persist()
    .post('/', exports.commandB)
    .reply(200, exports.responseB);
exports.batchedSendNockC = nock('http://localhost:24265', send_test_1.headers(API_VERSION))
    .persist()
    .post('/', exports.commandC)
    .reply(200, exports.responseC);
exports.batchedSendNockD = nock('http://localhost:24265', send_test_1.headers(API_VERSION))
    .persist()
    .post('/', exports.commandD)
    .reply(200, exports.responseD);
exports.batchedSendNockE = nock('http://localhost:24265', send_test_1.headers(API_VERSION))
    .persist()
    .post('/', exports.commandE)
    .reply(200, exports.responseE);
ava_1["default"]('batchedSend() returns correct response', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _b = (_a = t).deepEqual;
                return [4 /*yield*/, send(exports.command)];
            case 1:
                _b.apply(_a, [_c.sent(), exports.response]);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=batchedSend.test.js.map